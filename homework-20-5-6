  ## 1
      class Base {
          final public void show() {
          System.out.println("Base::show() called");
          }
      }

      class Derived extends Base {
          public void show() {
          System.out.println("Derived::show() called");
          }
      }

      class Main {
          public static void main(String[] args) {
              Base b = new Derived();;
              b.show();
          }
      }
  父类中使用final定义了show,子类中无法重写父类中的方法show.

  ## 2
      class Base {
          public static void show() {
          System.out.println("Base::show() called");
          }
      }

      class Derived extends Base {
          public static void show() {
          System.out.println("Derived::show() called");
          }
      }

      class Main {
          public static void main(String[] args) {
              Base b = new Derived();;
              b.show();
          }
      }
  输出结果为：Base::show() called

  ## 3
      class Base {
          public void Print() {
              System.out.println("Base");
          }         
      }

      class Derived extends Base {    
          public void Print() {
              System.out.println("Derived");
          }
      }

      class Main{
          public static void DoPrint( Base o ) {
              o.Print();   
          }
          public static void main(String[] args) {
              Base x = new Base();
              Base y = new Derived();
              Derived z = new Derived();
              DoPrint(x);
              DoPrint(y);
              DoPrint(z);
          }
      }
  输出结果为：
  Base
  Derived
  Derived


  ## 4
      class Base {
          public void foo() { System.out.println("Base"); }
      }

      class Derived extends Base {
          private void foo() { System.out.println("Derived"); } 
      }

      public class Main {
          public static void main(String args[]) {
              Base b = new Derived();
              b.foo();
          }
      } 
  编译错误，父类中使用public修饰foo方法，子类中使用private修饰foo方法。

  ## 5
  public class NewClass { 
    public static class superclass { 
      static void print() 
      { 
        System.out.println("print in superclass."); 
      } 
    } 
    public static class subclass extends superclass { 
      static void print() 
      { 
        System.out.println("print in subclass."); 
      } 
    } 

    public static void main(String[] args) 
    { 
      superclass A = new superclass(); 
      superclass B = new subclass(); 
      A.print(); 
      B.print(); 
    } 
  } 
  运行结果为：
  print in superclass.
  print in superclass.

  ## 6
      class ClassOne
      { 
          protected void getData() 
          { 
              System.out.println("Inside ClassOne");
          } 
      } 
      class ClassTwo extends ClassOne
      { 
          protected void getData() 
          { 
              System.out.println("Inside ClassTwo");
          } 
      } 

      public class Test 
      { 
          public static void main(String[] args) 
          { 
              ClassOne obj = new ClassTwo();
              obj.getData(); 
          } 
      } 
  运行结果为
  Inside ClassTwo

  ## 7
      class Test 
      { 
          void myMethod() 
          { 
              System.out.println("Test");
          } 
      } 
      class Derived extends Test
      { 
          void myMethod() 
          { 
              System.out.println("Derived");
          } 

          public static void main(String[] args) 
          { 
              Derived object = new Test(); 
              object.myMethod(); 
          } 
      } 
  编译错误，将Test转换为Derived是须进行强制类型转换。

  ## 8
      class ClassOne
      { 
          protected void getData() 
          { 
              System.out.println("Inside ClassOne");
          } 
      } 
      class ClassTwo extends ClassOne
      { 
          protected void getData() 
          { 
              System.out.println("Inside ClassTwo");
          } 

          protected void getValue() 
          { 
              System.out.println("ClassTwo");
          } 
      } 

      public class Test 
      { 
          public static void main(String[] args) 
          { 
              ClassOne obj = new ClassTwo();
              obj.getValue(); 
          } 
      } 
  编译错误，父类中没有子类中的方法“getvalue”
