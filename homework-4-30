
    1.
    class Clidder  
    { 
        private final void flipper()  
        { 
            System.out.println("Clidder"); 
        } 
    } 
    
    public class Clidlet extends Clidder  
    { 
        public final void flipper()  
        { 
            System.out.println("Clidlet"); 
        } 
        public static void main(String[] args)  
        { 
            new Clidlet().flipper(); 
        } 
    } 
    2.
    class Alpha  
    { 
        static String s = " "; 
        protected Alpha()  
        { 
            s += "alpha "; 
        } 
    } 
    class SubAlpha extends Alpha  
    { 
        private SubAlpha()  
        { 
            s += "sub "; 
        } 
    } 
    
    public class SubSubAlpha extends Alpha  
    { 
        private SubSubAlpha()  
        { 
            s += "subsub "; 
        } 
        public static void main(String[] args)  
        { 
            new SubSubAlpha(); 
            System.out.println(s); 
        } 
    } 
    3.
    class Grandparent  
    { 
        public void Print()  
        { 
            System.out.println("Grandparent's Print()");  
        }  
    } 
    
    class Parent extends Grandparent  
    { 
        public void Print()  
        { 
            System.out.println("Parent's Print()");  
        }  
    } 
    
    class Child extends Parent  
    { 
        public void Print()    
        { 
            super.super.Print(); 
            System.out.println("Child's Print()");  
        }  
    } 
    
    public class Main  
    { 
        public static void main(String[] args)  
        { 
            Child c = new Child(); 
            c.Print();  
        } 
    } 
    4.
    Complex number is (10.0 + 15.0i) toString()方法是Object类的一个实例方法，toString()方法是一个非常特殊的“自我描述”方法，该方法通常用于实现： 当程序员直接打印该对象时，系统将会输出该对象的“自我描述信息“，用以告诉外界该对象具有的状态信息。 Object类提供的toString()方法总是返回该对象实现类的”类名+@+hashCode“值， 这个返回值并不能真正实现”自我描述“的功能，因此如果需要实现”自我描述“，就必须重写toString()方法。

    final class Complex {
    
        private final double re;
        private final double im;
    
        public Complex(double re, double im) {
            this.re = re;
            this.im = im;
        }
    
        public String toString() {
            return "(" + re + " + " + im + "i)";
        }
    }
    
    class Main {
    public static void main(String args[])
    {
        Complex c = new Complex(10, 15);
        System.out.println("Complex number is " + c);
    }         
    }
    5.
    Class A Class B Class C

    class A
    {
        String s = "Class A";
    }
    
    class B extends A
    {
        String s = "Class B";
    
        {
            System.out.println(super.s);
        }
    }
    
    class C extends B
    {
        String s = "Class C";
    
        {
            System.out.println(super.s);
        }
    }
    
    public class MainClass
    {
        public static void main(String[] args)
        {
            C c = new C();
    
            System.out.println(c.s);
        }
    }
    6.
    THIRD SECOND FIRST

    class A
    {
        static
        {
            System.out.println("THIRD");
        }
    }
    
    class B extends A
    {
        static
        {
            System.out.println("SECOND");
        }
    }
    
    class C extends B
    {
        static
        {
            System.out.println("FIRST");
        }
    }
    
    public class MainClass
    {
        public static void main(String[] args)
        {
            C c = new C();
        }
    }
    7.
    Class Y

    class X
    {
        static void staticMethod()//被子类中同类型方法重写
        {
            System.out.println("Class X");
        }
    }
    
    class Y extends X
    {
        static void staticMethod()
        {
            System.out.println("Class Y");
        }
    }
    
    public class MainClass
    {
        public static void main(String[] args)
        {
            Y.staticMethod();
        }
    }
    8.
    A D B C E F

    class M
    {
        static
        {
            System.out.println('A');
        }
    
        {
            System.out.println('B');
        }
    
        public M()
        {
            System.out.println('C');
        }
    }
    
    class N extends M
    {
        static
        {
            System.out.println('D');
        }
    
        {
            System.out.println('E');
        }
    
        public N()
        {
            System.out.println('F');
        }
    }
    
    public class MainClass
    {
        public static void main(String[] args)
        {
            N n = new N();
        }
    }
    9.
    AAABBB

    执行父类静态代码 执行子类静态代码//静态变量和静态代码块的加载顺序由编写先后决定

    初始化父类成员变量（我们常说的赋值语句） 父类代码块//代码块实际上是被放到了构造方法中，且是放在了构造方法的第一句 父类构造方法

    子类成员变量 子类代码块 子类构造方法

    静态方法，调用的时候才加载

    class A
    {
        static String s = "AAA";//第一步

        static
        {
            s = s + "BBB";//第二步
        }

        {
            s = "AAABBB";//第四步
        }
    }

    class B extends A
    {
        static
        {
            s = s + "BBBAAA";//第三步
        }

        {
            System.out.println(s);//第五步
        }
    }

    public class MainClass
    {
        public static void main(String[] args)
        {
            B b = new B();
        }
    }
    10.
    执行父类静态代码 执行子类静态代码//静态变量和静态代码块的加载顺序由编写先后决定

    初始化父类成员变量（我们常说的赋值语句） 父类代码块//代码块实际上是被放到了构造方法中，且是放在了构造方法的第一句 父类构造方法

    子类成员变量 子类代码块 子类构造方法

    静态方法，调用的时候才加载

    class X
    {
        int i = 101010;//第一步

        public X()
        {
            i = i++ + i-- - i;//第二步：i= 101010 + 101011 + 101010=101011，第一步的i变成101011
        }

        static int staticMethod(int i)//第四步
        {
            return --i;返回101010
        }
    }

    class Y extends X
    {//与第二步同时：继承来的成员变量为101011
        public Y()
        {
            System.out.println(staticMethod(i));//第三步：参数为101011
        }
    }

    public class MainClass
    {
        public static void main(String[] args)
        {
            Y y = new Y();
        }
    }
    11.
    1 191918

    class ClassOne
    {
        static int i, j = 191919;//第一步 i = 0; j = 191919
    
        {
            --i;//没有new对象，不会调用代码块
        }
    
        {
            j++;
        }
    }
    
    public class ClassTwo extends ClassOne
    {//同第一步,继承过来static int i = 0, j = 191919 
        static
        {
            i++;//第三步,i = i + 1= 1
        }
    
        static
        {
            --j;//第四步，j = j -1 = 191918
        }
    
        public static void main(String[] args)
        {
            System.out.println(i);//本题无new对象,只有两个类的区域，不会走父类中的构造方法和代码块
    
            System.out.println(j);
        }
    }
    12.
    0

    class A
    {
        int[] a = new int[5];第一步

        {
            a[0] = 10;第二步
        }
    }

    public class MainClass extends A
    {与第二步同时，继承了一个a[0]=10的数组
        {
            a = new int[5];//第三部,a重构成0数组
        }

        {
            System.out.println(a[0]);
        }

        public static void main(String[] args)
        {
            MainClass main = new MainClass();
        }
    }
    13.
    0

    class A
    {
        static int i;//第一步i=0，注意i是静态的

        static
        {
            i++;//第二步，i = 1
        }

        {
            ++i;//第四步，i = 1
        }
    }

    class B extends A
    {与第二步同时,i = 1
        static
        {
            --i;//第三步i = 0，此时父类中i也变为0
        }

        {
            i--;//第五步，i= 0
        }
    }

    public class MainClass
    {
        public static void main(String[] args)
        {
            System.out.println(new B().i);
        }
    }
    14.
    //31

    public class MainClass
    {
        public MainClass(int i, int j)
        {
            System.out.println(method(i, j));
        }
        
        int method(int i, int j)
        {
            return i++ + ++j;//10 + 21
        }
        
        public static void main(String[] args) 
        {
            MainClass main = new MainClass(10, 20);
        }
    }
    15.
    class X
    {
        static
        {
            Y.methodOfY();
        }
    }

    class Y extends X
    {
        static void methodOfY()
        {
            System.out.println("Hi....");
        }
    }

    public class MainClass
    {
        public static void main(String[] args)
        {
            Y.methodOfY();
        }
    }
    Hi.... Hi....

    16.
    -113 110//问题：创立对象后，子类中变量值和父类中变量值是联动的吗？

    class ClassOne
    {
        static int i = 111;//第一步
        
        int j = 222;//第二步
        
        {
            i = i++ - ++j;//第三步；111 - 223 = -112,此时static int i变为-112，int j 变为223,表达式值和j的值都是223
        }//对i = i++,表达式值为111，i的值为112
    }

    class ClassTwo extends ClassOne
    {与第三步同时，i = -112,j = 223
        {
            j = i-- + --j;//第四步，-112 + 222 = 110,但是i最后的值为-113
        }

        public static void main(String[] args) {
                System.out.println(i);
                ClassTwo two = new ClassTwo();
                System.out.println(two.i);
                System.out.println(two.j);
            }
    }


